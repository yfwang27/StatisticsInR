prop.test(vote.leave, total.vote, p=0.5, alternative = "two.sided")
?binom.confint
binom.confint(vote.leave, total.vote, conf.level = 0.95, methods = "asymptotic")
set.seed(123)
no.experiment=10
mat4plot<-matrix(nrow=no.experiment,ncol=1);#mat4plot[,2]<-1;
no.observation<-10
for (i in 1:no.experiment){
mat4plot[i,1]<-mean(rbinom(no.observation,1,0.5))
}
hist(mat4plot[,1],xlim=c(0,1),breaks=100,
xlab="mean",ylab="observed frequency",
main="flip a coin 10 times, and repeat it 10 times")
mat4plot
set.seed(123)
no.experiment=100
mat4plot<-matrix(nrow=no.experiment,ncol=1)
no.observation<-10
for (i in 1:no.experiment){
mat4plot[i,1]<-mean(rbinom(no.observation,1,0.5))
}
hist(mat4plot[,1],xlim=c(0,1),breaks=100,xlab="mean",ylab="observed frequency",
main="flip a coin 10 times, and repeat it 100 times")
set.seed(123)
no.experiment=1000
mat4plot<-matrix(nrow=no.experiment,ncol=1)
no.observation<-10
for (i in 1:no.experiment){
mat4plot[i,1]<-mean(rbinom(no.observation,1,0.5))
}
hist(mat4plot[,1],xlim=c(0,1),breaks=100,xlab="mean",
ylab="observed frequency",main="flip a coin 10 times, and repeat it 1,000 times")
no.experiment=1000
mat4plot<-matrix(nrow=no.experiment,ncol=1)
no.observation<-10
for (i in 1:no.experiment){
mat4plot[i,1]<-mean(rbinom(no.observation,1,0.5))
}
hist(mat4plot[,1],xlim=c(0,1),breaks=100,xlab="mean",ylab="observed frequency",
main="flip a coin 10 times, and repeat it 1,000 times",freq = F)
set.seed(123)
no.experiment=1000
mat4plot<-matrix(nrow=no.experiment,ncol=1)
no.observation<-10
for (i in 1:no.experiment){
mat4plot[i,1]<-mean(rbinom(no.observation,1,0.5))
}
hist(mat4plot[,1],xlim=c(0,1),breaks=100,xlab="mean",ylab="observed frequency",
main="flip a coin 10 times, and repeat it 1,000 times")
set.seed(123)
no.experiment=1000
mat4plot<-matrix(nrow=no.experiment,ncol=1)
no.observation<-100
for (i in 1:no.experiment){
mat4plot[i,1]<-mean(rbinom(no.observation,1,0.5))
}
hist(mat4plot[,1],xlim=c(0,1),breaks=100,xlab="mean",ylab="observed frequency",
main="flip a coin 100 times, and repeat it 1,000 times")
biom.result<-binom.test(vote.leave, total.vote, p=0.5, alternative = "two.sided")
biom.result$conf.int
str(biom.result)
library("tidyr")
set.seed(123)
no.experiment=1000
mat4plot<-matrix(nrow=no.experiment,ncol=1)
no.observation<-10
for (i in 1:no.experiment){
mat4plot[i,1]<-mean(rbinom(no.observation,1,0.5))
}
hist(mat4plot[,1],xlim=c(0,1),breaks=100,xlab="mean",ylab="observed frequency",
main="flip a coin 10 times, and repeat it for 1,000 times")
install.packages("dplyr")
library("dplyr")
data(iris)
class(iris)
str(iris)
points(c(0,1.781275),pch=20)
plot(iris_versi$Petal.Width,iris_versi$Petal.Length,xlim=c(0,1.8),ylim=c(0,5),
xlab="Petal Width of Iris.versicolor (x)",
ylab="Petal Length of Iris.versicolor (y)")
abline(lm(iris_versi$Petal.Length~iris_versi$Petal.Width,data=iris_versi),
col="blueviolet",lwd=3, lty=3)
points(c(0,1.781275),pch=20)
plot(iris_versi$Petal.Width,iris_versi$Petal.Length,xlim=c(0,1.8),ylim=c(0,5),
xlab="Petal Width of Iris.versicolor (x)",
ylab="Petal Length of Iris.versicolor (y)")
abline(lm(iris_versi$Petal.Length~iris_versi$Petal.Width,data=iris_versi),
col="blueviolet",lwd=3, lty=3)
points(x=0,y=1.781275,pch=20)
title("Scatter plot of Iris.versicolor Petal.Width vs Petal.Length")
?abline
lmResult$coefficients
iris_versi<-iris[iris$Species=="versicolor",]
str(iris_versi)
head(iris_versi[,c("Petal.Length","Species")])
mean(iris_versi$Petal.Length)
plot(iris_versi$Petal.Length, ylab="Petal Length of Iris.versicolor")
abline(h=mean(iris_versi$Petal.Length),
col="forestgreen",lwd=3)
plot(iris_versi$Petal.Length,ylab="Petal Length of Iris.versicolor")
abline(h=mean(iris_versi$Petal.Length),
col="forestgreen",lwd=3)
segments(x0=c(1:nrow(iris_versi)),y0=iris_versi$Petal.Length,
x1=c(1:nrow(iris_versi)),y1=mean(iris_versi$Petal.Length),col="pink")
plot(iris_versi$Petal.Width,iris_versi$Petal.Length,
xlab="Petal Width of Iris.versicolor (x)",
ylab="Petal Length of Iris.versicolor (y)")
abline(lm(iris_versi$Petal.Length~iris_versi$Petal.Width,data=iris_versi),
col="blueviolet",lwd=3, lty=3)
title("Scatter plot of Iris.versicolor Petal.Width vs Petal.Length")
lmResult<-lm(formula = Petal.Length ~ Petal.Width, data = iris_versi)
lmResult
lmResult$coefficients
str(lmResult)
summary(lmResult)
?predict
x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y ~ x), new, se.fit = TRUE)
pred.w.plim <- predict(lm(y ~ x), new, interval = "prediction")
pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
matplot(new$x, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
new
predict(lmResult,1)
lmResult
predict(lmResult,data.frame(x=c(1,2,3)))
predict(lmResult,data.frame(Petal.Width=c(1,2,3)))
3.650600-1.781
?predict
plot(c(-1, 26), 0:1, type = "n", axes = FALSE)
text(0:25, 0.6, 0:25, cex = 0.5)
points(0:25, rep(0.3, 26), pch = 0:25, bg = "grey")
iris_versi<-iris[iris$Species=="versicolor",c("Petal.Length","Petal.Width")]
str(iris_versi)
IrisLm.res<-lmResult$residual
IrisLm.res
head(IrisLm.res)
sum(IrisLm.res)
MSE <- mean(lmResult$residuals^2)
RSS <- sum((predict(lmResult) - mean(iris_versi$Petal.Length))^2)
MSE
RSS
predict(lmResult)
head(predict(lmResult))
head(predict(lmResult))[1]
dim(predict(lmResult))
length(predict(lmResult))
?predict
summary(lmResult)$fstatistic
1-(SSE/TSS)
SSE <- sum(resid(lmResult)^2)
TSS <- sum((iris_versi$Petal.Length - mean(iris_versi$Petal.Length))^2)
1- SSE/TSS
SSE <- sum(resid(lmResult)^2)
TSS <- sum((iris_versi$Petal.Length - mean(iris_versi$Petal.Length))^2)
1- SSE/TSS
summary(lmResult)$r.squared
sum(resid(lmResult)^2)
sum((iris_versi$Petal.Length - mean(iris_versi$Petal.Length))^2)
1- (SSE/TSS)
lmResult
lmResult<-lm(formula = Petal.Length ~ Petal.Width, data = iris_versi)
lmResult
summary(lmResult)
lmResult$coefficients
IrisLm.res<-lmResult$residual
head(IrisLm.res)
sum(IrisLm.res)
summary(lmResult)
summary(lmResult)
SSE <- sum(resid(lmResult)^2)
TSS <- sum((iris_versi$Petal.Length - mean(iris_versi$Petal.Length))^2)
1- SSE/TSS
summary(lmResult)$r.squared
SSE <- sum(resid(lmResult)^2)
TSS <- sum((iris_versi$Petal.Length - mean(iris_versi$Petal.Length))^2)
1- SSE/TSS
MSE <- mean(lmResult$residuals^2)
RSS <- sum((predict(lmResult) - mean(iris_versi$Petal.Length))^2)
summary(lmResult)$fstatistic
data(iris)
iris4cor<-iris[,1:4]
iris_versi<-
iris[iris$Species=="versicolor", c("Petal.Length","Petal.Width")]
dim(iris_versi)
head(iris_versi)
summary(lmResult)
Eng.life.exp<-Life_exp[Life_exp$area=="England",]
boxplot(life.expectancy~area,data=Life_exp,las=2, cex.axis=0.6)
boxplot(life.expectancy~gender*area,data=Life_exp,col=(c("gold","darkgreen")),
las=2, cex.axis=0.6)
Life_exp<-read.csv("data/Life_expectancy_at_birth.csv",header=T)
Life_exp
head(Life_exp)
Eng.life.exp<-Life_exp[Life_exp$area=="England",]
boxplot(life.expectancy~area,data=Life_exp,las=2, cex.axis=0.6)
boxplot(life.expectancy~gender*area,data=Life_exp,col=(c("gold","darkgreen")),
las=2, cex.axis=0.6)
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
degf <- c(1, 3, 8, 30)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("df=1", "df=3", "df=8", "df=30", "normal")
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
hx <- dnorm(x)
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("dnorm(x, log=TRUE)", adj = 0)
mtext("log(dnorm(x))", col = "red", adj = 1)
plot(function(x) pnorm(x, log.p = TRUE), -50, 10,
main = "log { Normal Cumulative }")
curve(log(pnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("pnorm(x, log=TRUE)", adj = 0)
mtext("log(pnorm(x))", col = "red", adj = 1)
axis(side=1, at=x, labels=c("-2sig","sig", "mu","sig","2sig"))
plot(x, hx, type="l", lty=2, xlab="x value",ylab="Density", main="Normal distribution",ann=FALSE)
plot(x, hx, type="l", lty=2, xlab="x value",ylab="Density", main="Normal distribution",xaxt='n')
plot(x, hx, type="l", lty=2, xlab="x value",ylab="Density", main="Normal distribution",xaxt='n')
axis(side=1, at=c(-4,-2,0,2,4), labels=c(expression(mu),"1","0","2","44"))
plot(x, hx, type="l", lty=2, xlab="x value",ylab="Density", main="Normal distribution",xaxt='n')
axis(side=1, at=c(-4,-2,0,2,4),
labels=c(paste(-2,expression(sigma)),"1",expression(mu),"2","44"))
axis(side=1, at=c(-4,-2,0,2,4),
labels=c(expression(paste(-2,sigma)),"1",expression(mu),"2","44"))
dev.off()
plot(x, hx, type="l", lty=2, xlab="x value",ylab="Density", main="Normal distribution",xaxt='n')
axis(side=1, at=c(-4,-2,0,2,4),
labels=c(expression(paste(-2,sigma)),"1",expression(mu),"2","44"))
plot(x, hx, type="l", lty=2, xlab="x value",ylab="Density", main="Normal distribution",xaxt='n')
axis(side=1, at=c(-4,-2,0,2,4),
labels=c(expression(paste(-2,sigma)),expression(-sigma),expression(mu),"2","44"))
plot(x, hx, type="l", lty=2, xlab="x value",ylab="Density", main="Normal distribution",xaxt='n')
axis(side=1, at=c(-4,-2,0,2,4),
labels=c(expression(paste(-2,sigma)),expression(-sigma),expression(mu),
expression(sigma),expression(paste(2,sigma))))
x <- seq(-2, 2, length=200)
hx <- dnorm(x)
plot(x, hx, type="l", lty=2, xlab="z score",ylab="Density", main="standardised Normal distribution",xaxt='n')
x <- seq(-2, 2, length=200)
hx <- dnorm(x)
plot(x, hx, type="l", lty=2, xlab="z score",ylab="Density", main="standardised Normal distribution",xaxt='n')
plot(x, hx, type="l", lty=3, xlab="x value",ylab="Density", main="Normal distribution",xaxt='n')
axis(side=1, at=c(-4,-2,0,2,4),
labels=c(expression(paste(-2,sigma)),expression(-sigma),expression(mu),
expression(sigma),expression(paste(2,sigma))))
v=quantile(c(1:nrow(Life_exp)))[c(2,4)],col="pink",lwd=3,lty=3)
min.life.exp<-min(Life_exp$life.expectancy)
max.life.exp<-max(Life_exp$life.expectancy)
median.life.exp<-median(Life_exp$life.expectancy)
quantile(Life_exp$life.expectancy)[c(2,4)]
quantile(Life_exp$life.expectancy)
quan_1<-quantile(Life_exp$life.expectancy)[2]
quan_3<-quantile(Life_exp$life.expectancy)[4]
plot(sort(Life_exp$life.expectancy),ylab="Life expectancy (Years)",xaxt="n")
axis(side=1, at=c(min.life.exp,quan_1,median.life.exp,quan_3,max.life.exp),
labels=c("min","1stQuantile","median","3rdQuantil","max"))
points(x=c(1,median(1:nrow(Life_exp)),nrow(Life_exp)),
y=c(min(Life_exp$life.expectancy),
median(Life_exp$life.expectancy),max(Life_exp$life.expectancy)),
col="red",pch=16,cex=1.6)
abline(h=quantile(Life_exp$life.expectancy)[c(2,4)],
v=quantile(c(1:nrow(Life_exp)))[c(2,4)],col="pink",lwd=3,lty=2)
plot(sort(Life_exp$life.expectancy),ylab="Life expectancy (Years)",xaxt="n")
axis(side=1, at=c(0,quan_1,median.life.exp,quan_3,nrow(Life_exp)),
labels=c("min","1stQuantile","median","3rdQuantil","max"))
quan_1<-quantile(c(1:nrow(Life_exp)))[2]
quan_3<-quantile(c(1:nrow(Life_exp)))[4]
plot(sort(Life_exp$life.expectancy),ylab="Life expectancy (Years)",xaxt="n")
axis(side=1, at=c(0,quan_1,median(1:nrow(Life_exp)),quan_3,nrow(Life_exp)),
labels=c("min","1stQuantile","median","3rdQuantil","max"))
points(x=c(1,median(1:nrow(Life_exp)),nrow(Life_exp)),
y=c(min(Life_exp$life.expectancy),
median(Life_exp$life.expectancy),max(Life_exp$life.expectancy)),
col="red",pch=16,cex=1.6)
abline(h=quantile(Life_exp$life.expectancy)[c(2,4)],
v=quantile(c(1:nrow(Life_exp)))[c(2,4)],col="pink",lwd=3,lty=2)
?scale
x <- seq(0,50,by=1)
y <- dbinom(x,50,0.2)
plot(x,y)
y <- dbinom(x,50,0.6)
plot(x,y)
x <- seq(-20,20,by=.1)
y <- dnorm(x)
plot(x,y)
x <- seq(0, 100, by=1)
hx <- dbinom(x,100,0.5)
plot(x, hx, type="l", lty=2, lwd=2, cor="blue4",
xlab="x value",ylab="Density", main="Normal distribution",xaxt='n')
x <- seq(0, 100, by=1)
hx <- dbinom(x,100,0.2)
x <- seq(0, 100, by=1)
hx <- dbinom(x,100,0.2)
plot(x, hx, type="l", lty=2, lwd=2, cor="blue4",
xlab="x value",ylab="Density", main="Normal distribution")
x <- seq(0, 100, by=1)
hx <- dbinom(x,100,0.2)
plot(x, hx, type="l", lty=2, lwd=2, cor="blue4",
xlab="x value",ylab="Density", main="Binominal distribution")
plot(1:10, type="n", xlab="", ylab="", main = "plot math & numbers")
theta <- 1.23 ; mtext(bquote(hat(theta) == .(theta)), line= .25)
plot(1:10, type="n", xlab="", ylab="", main = "plot math & numbers")
mtext(bquote(hat(theta) == .(theta)), line= .25)
x <- seq(0,100,by=1)
y <- dbinom(x,100,0.6)
plot(x,y)
x <- seq(0, 100, by=1)
hx <- dbinom(x,100,0.2)
plot(x, hx, type="l", lty=2, lwd=2, cor="brown4",
xlab="x value",ylab="Density", main="Binominal distribution")
plot(x, hx, type="l", lty=2, lwd=2, cor="blue",
xlab="x value",ylab="Density", main="Binominal distribution")
10*(1/6)
1*(1/6)+2*(1/6)+3*(1/6)+4*(1/6)+5*(1/6)+6*(1/6)
set.seed(123)
rnorm(10,mean=8,sd=3)
set.seed(123)
rnorm(10,mean=8,sd=3)
?set.seed
set.seed(2)
rnorm(10,mean=8,sd=3)
rnorm(10,mean=8,sd=3)
rnorm(10,mean=8,sd=3)
set.seed(2)
rnorm(10,mean=8,sd=3)
rnorm()
?rbnorm
?rbinom
rbinom(10,1,0.2)
rbinom(10,1,0.5)
rbinom(10,10,0.5)
rbinom(10,10,0.5)
rbinom(10,1,0.5)
plot(rnorm(10,mean=8,sd=3))
dnorm(8,mean=8,sd=3)
pnorm(8,mean=8,sd=3)
x <- seq(-4, 4, length=100)
x
?dnorm
rnorm(10,mean=8,sd=3)
set.seed(2)
x <- rnorm(10,mean=8,sd=3)
hx <- dnorm(x,mean=8,sd=3)
plot(x, hx, type="l", lty=2, lwd=2, cor="blue4",
xlab="x value",ylab="Density", main="Normal distribution",xaxt='n')
x <- rnorm(10,mean=8,sd=3)
set.seed(2)
x <- seq(-20,20,by=.1)
hx <- dnorm(x)
plot(x, hx, type="l", lty=2, lwd=2, cor="blue4",
xlab="x value",ylab="Density", main="Normal distribution")
x <- seq(0,16,by=.1)
x <- seq(0,16,by=.1)
hx <- dnorm(x)
hx <- dnorm(x,mean=8,sd=3)
plot(x, hx, type="l", lty=2, lwd=2, cor="blue4",
xlab="x value",ylab="Density", main="Normal distribution")
plot(x, hx, lty=2, lwd=2, cor="blue4",
xlab="x value",ylab="Density", main="Normal distribution")
data4plot<-rnorm(10,mean=8,sd=3)
set.seed(2)
rnorm(10,mean=8,sd=3)
set.seed(2)
data4plot<-rnorm(10,mean=8,sd=3)
plot(x, hx, type="l", lty=2, lwd=2, cor="blue4",
xlab="x value",ylab="Density", main="Normal distribution",xaxt="n")
axis(side=1, at=c(2,5,8,11,14),
labels=c(2,5,8,11,14))
?mtext
maxdensity<-dnorm(8,mean=8,sd=3)
data4plot
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
plot(function(x) dnorm(x, log = F), -60, 50,
main = "log { Normal density }")
cord.x <- c(-3,seq(-3,-2,0.01),-2)
cord.y <- c(0,dnorm(seq(-3,-2,0.01)),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Standard Normal')
polygon(cord.x,cord.y,col='skyblue')
cord.x <- c(-3,seq(-3,-2,0.01),-2)
cord.y <- c(0,dnorm(seq(-3,-2,0.01)),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Standard Normal')
curve(dnorm(x,0,1))
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
curve(dnorm(x,8,3),xlim=c(0,16),main='Normal Density')
cord.x <- c(0,seq(0,8,0.01),8)
cord.y <- c(0,dnorm(seq(0,8,0.01),mean=8,sd=3),0)
curve(dnorm(x,8,3),xlim=c(0,16),main='Normal Density')
cord.x <- c(0,seq(0,8,0.01),8)
cord.y <- c(0,dnorm(seq(0,8,0.01),mean=8,sd=3),0)
polygon(cord.x,cord.y,col='skyblue')
plot(x, hx, type="l", lty=2, lwd=2, col="blue4",ylim=c(0,maxdensity),
pnorm(11,mean=8,sd=3)
pnorm(11,mean=8,sd=3)
qnorm(0.8413,mean=8,sd=3)
qnorm(0.8413447,mean=8,sd=3)
nrows
?nrows
?nrow
data("PlantGrowth")
PlantGrowth
PlantGrowthforwide<-PlantGrowth
PlantGrowthforwide$replicate<-rep(c(1:10),3)
PlantGrowth_wide<-spread(PlantGrowthforwide, group, weight)
library("tidyr")
PlantGrowthforwide$replicate<-rep(c(1:10),3)
PlantGrowth_wide<-spread(PlantGrowthforwide, group, weight)
head(PlantGrowth_wide)
result <- var.test(PlantGrowth_wide$ctrl, PlantGrowth_wide$trt1)
str(result)
Result <- t.test(PlantGrowth_wide$ctrl,PlantGrowth_wide$trt1,alternative ="two.sided", var.equal = T)
Result
str(test_res)
test_res <- t.test(PlantGrowth_wide$ctrl,PlantGrowth_wide$trt1,alternative ="two.sided", var.equal = T)
test_res
data4formula<-PlantGrowth[PlantGrowth$group!="trt2",]
result_formula <- t.test(weight~group,data4formula,alternative ="two.sided", var.equal = T)
result_formula
?fisher.test()
total.vote
pnorm()
?pnorm
qnorm(-5.17)
qnorm(5.17)
pnorm(-5.17)
1/9000000
alpha.vote=0.05;
phat.vote<-vote.remain/total.vote;
p.vote=0.5;
phat.vote<-vote.remain/total.vote;
d=phat.vote-p.vote
d
z.vote<-qnorm(alpha.vote/2,
mean=0,sd=1,
lower.tail = F)
z.vote
d/(p.vote*(1-p.vote)/total.vote)
d/sqrt(p.vote*(1-p.vote)/total.vote)
v<-d/sqrt(p.vote*(1-p.vote)/total.vote)
pnorm(v)
phat.vote<-vote.remain/total.vote
phat.vote
total.vote
workwd="/CSC/project/Jesus/analysis"
setwd(workwd)
libsizeall<-read.table("/CSC/project/Rachel/RepEnrichOutput/thAligned/tophat_alignment_overallstat.txt",
header=T,sep="\t")
head(libsizeall)
libsizeall<-read.table("MM0_align_summary.txt",
header=T,sep="\t")
head(libsizeall)
libsizeall<-read.table("MM0_align_summary.txt",header=T,sep="\t")
libsizeall<-read.table("MM0_align_summary.txt",header=T,sep="\t")
rm(libsizeall)
libsizeall<-read.table("MM0_align_summary.txt",header=T,sep="\t")
libsizeall<-read.table("MM0_align_summary.txt",header=T,sep="\t")
head(libsizeall)
libsizeall<-read.table("MM0_align_summary.txt",header=T,sep="\t")
library("reshape")
install.packages(reshape)
install.packages("knitr")
install.packages("knitr")
library(RCurl)
install.packages("RCurl")
download.file(url,destination,method="curl")
packrat::restore(prompt = FALSE)
packrat::snapshot(prompt = FALSE)
packrat::snapshot(prompt = FALSE)
install.packages("~/Downloads/knitr_1.13.tar", repos = NULL)
library(knitr)
detach("package:knitr", unload=TRUE)
library("knitr", lib.loc="~/workfromhome/workshop/StatisticsInR/Statistics2016/packrat/lib/x86_64-apple-darwin13.4.0/3.2.2")
install.packages("stringr")
?install.packages
install.packages("stringr",lib="/Users/yfwang27/workfromhome/workshop/StatisticsInR/Statistics2016/packrat/lib/x86_64-apple-Yosemite10.10.5")
install.packages("~/Downloads/stringr_1.0.0.tar", repos = NULL)
library("stringr")
detach("package:knitr", unload=TRUE)
library("knitr", lib.loc="~/workfromhome/workshop/StatisticsInR/Statistics2016/packrat/lib/x86_64-apple-darwin13.4.0/3.2.2")
install.packages("~/Downloads/dplyr_0.5.0.tar", repos = NULL)
install.packages("~/Downloads/evaluate_0.9.tar", repos = NULL)
install.packages("~/Downloads/markdown_0.7.7.tar", repos = NULL)
packrat::restore(prompt = FALSE)
install.packages("~/Downloads/tibble_1.1.tar", repos = NULL)
install.packages("~/Downloads/yaml_2.1.13.tar", repos = NULL)
install.packages("~/Downloads/tidyr_0.5.1.tar", repos = NULL)
packrat::snapshot(prompt = FALSE)
install.packages("~/Downloads/tibble_1.1.tar", repos = NULL)
packrat::snapshot(prompt = FALSE)
install.packages("~/Downloads/binom_1.1-1.tar", repos = NULL)
library("binom")
library("binom", lib.loc="~/workfromhome/workshop/StatisticsInR/Statistics2016/packrat/lib/x86_64-apple-darwin13.4.0/3.2.2")
library("binom")
library("tidyr")
install.packages("vioplot")
sessionInfo()
knitr::purl("Session1_describe_the_data.Rpres")
set.seed(2)
data4plot<-rnorm(10,mean=8,sd=3)
maxdensity<-dnorm(8,mean=8,sd=3)
curve(dnorm(x,8,3),xlim=c(0,16),main='Normal distribution',
xlab="x value",ylab="Density",
col="blue4",xaxt="n",type="l", lty=2, lwd=2)
cord.x <- c(0,seq(0,8,0.01),8)
cord.y <- c(0,dnorm(seq(0,8,0.01),mean=8,sd=3),0)
polygon(cord.x,cord.y,col='salmon')
axis(side=1, at=c(2,5,8,11,14),labels=c(2,5,8,11,14))
