Session3: Linear Regression
========================================================
author: MRC Clinical Sciences Centre (http://mrccsc.github.io/)
date: 12/July/2016
width: 1440
height: 1100
autosize: true
font-import: <link href='http://fonts.googleapis.com/css?family=Slabo+27px' rel='stylesheet' type='text/css'>
font-family: 'Slabo 27px', serif;
css:style.css

Outline
========================================================
- correlation

- linear regression


Dataset - use the "iris" data (1/3)
========================================================
We have used the "iris" data for the [Intermediate R course]. We are going to work on this data again for this session.

Dataset - use the "iris" data (2/3)
========================================================
Some basic checks
```{r}
class(iris)
str(iris)
```
***
```{r}
head(iris)
```


Dataset - use the "iris" data (3/3)
========================================================
[*intermediate R; add a link to the intermediate R]
```{r}
# library("dplyr")
# tbl_df()

```

Correlation (1/)
========================================================
- pearson

- spearman

Correlation (2/)
========================================================
```{r}
cor(iris[,1:4])
```

Correlation (3/)
========================================================
```{r}
pairs(iris[,1:4])
```

Correlation (4/)
========================================================
[probably find an example that requires the spearman method]
```{r}
cor(iris[,1:4],method="spearman")
```

Regression and linear models (1/)
=========================================================

We have seen how we can find the correlation between two sets of variables using cor() function.

R also provides a comprehensive set of tools for regression analysis including the well used linear modeling function lm()

To fit a linear regression we use a similar set of arguments as passed to the t-test fuction in the previous slide.

Regression and linear models (/)
=========================================================
Using the Petal.Width from iris data as example

We could like to use the current information to predict the width of a petal from Iris.versicolor
![alt text](imgs/Iris_versicolor.jpg)
***
```{r}
iris_versi<-iris[iris$Species=="versicolor",]

str(iris_versi)
```


Regression and linear models (/)
=========================================================
Try to use the mean of total Petal.Length first
```{r}
head(iris_versi[,c("Petal.Length",
                   "Species")])
mean(iris_versi$Petal.Length)
```
***
```{r}
plot(iris_versi$Petal.Length)
abline(h=mean(iris_versi$Petal.Length),
       col="forestgreen",lwd=3)
```


Regression and linear models (/)
=========================================================
Try to use the mean of total Petal.Length first

```{r,echo=F}
diff_df<-iris_versi$Petal.Length-mean(iris_versi$Petal.Length)
plot(iris_versi$Petal.Length)
abline(h=mean(iris_versi$Petal.Length),
       col="forestgreen",lwd=3)

segments(x0=c(1:nrow(iris_versi)),y0=iris_versi$Petal.Length,
         x1=c(1:nrow(iris_versi)),y1=mean(iris_versi$Petal.Length),col="pink")
```
***
In this case, the expected values is  $$ mean  = \bar{y} $$
- residuals (Error)
$$
  \begin{aligned}

  Error_i & = y_i - \bar{y}
  \\ \\
  \end{aligned}
$$
- square of the residuals
- sum of the square of the residuals (SSE)


Regression and linear models (/)
=========================================================
Zoom in [just see 3 data points]

```{r,echo=F}
diff_df<-iris_versi$Petal.Length-mean(iris_versi$Petal.Length)
plot(iris_versi$Petal.Length[c(2:4)],xlim=c(0.5,4.5), ylim=c(2,6))
abline(h=mean(iris_versi$Petal.Length),
       col="forestgreen",lwd=3)

rect(xleft=c(1:3),ybottom=mean(iris_versi$Petal.Length),
     xright=c(1:3)+abs(diff_df[c(2:4)]),
     ytop=mean(iris_versi$Petal.Length)+diff_df[c(2:4)],
     density=30,col = "blue")

segments(x0=c(1:3),y0=iris_versi$Petal.Length[c(2:4)],
         x1=c(1:3),y1=mean(iris_versi$Petal.Length),col="pink",lwd=3)
```
***
In this case, the expected values is  $$ mean  = \bar{y} $$
- residuals (Error)
$$
  \begin{aligned}
  \\
  Error_i & = y_i - \bar{y}
  \end{aligned}
$$
- square of the residuals
$$
  Error_i^2
$$
- sum of the square of the residuals (SSE)


Regression and linear models (/)
=========================================================

```{r}
lm(formula = Petal.Width ~ Petal.Length, data = iris)
```

Regression and linear models
=========================================================

```{r,echo=T,prompt=T}
lmExample <- read.table("data/lmExample.txt",h=T,sep="\t")
```
```{r,echo=T,prompt=T}
lmResult <- lm(Y~X,data=lmExample)
plot(Y~X,data=lmExample,main="Line of best fit with lm()",
     xlim=c(0,150),ylim=c(0,200))
abline(lmResult,col="red",lty=3,lwd=3)
```

Statistics (21/26) The lm() function
=========================================================

The lm() function fits a linear regression to your data and provides useful information on the generated fit.

In the example below we fit a linear model using  lm() on the lmExample dataset with column Y as the dependent variable and column X as the explanatory variable.

```{r,echo=T,prompt=T}
lmResult <- lm(Y~X,data=lmExample)
lmResult
```

Printing the result from lm() shows the call to lm() and the coefficients including the intercept.

Statistics (22/26) - Plotting line of best fit.
=========================================================

From the previous slides we now know the formula for the line.

**Y = 7.001 + 1.972*X**

We can add the line of best fit using **abline()**

```{r,echo=T,prompt=T}
plot(Y~X,data=lmExample,main="Line of best fit with lm()",
     xlim=c(0,100),ylim=c(0,200))
abline(lmResult,col="red",lty=3,lwd=3)
```

Statistics (23/26) - Interpreting output of lm()
=========================================================
As we have seen, printing the model result provides the intercept and slope of line.

To get some more information on the model we can use the summary() function

```{r,prompt=T}
summary(lmResult)
```


Statistics (24/26) - Residuals
=========================================================

```{r,prompt=T,echo=F}
summary(lmResult)
```

***
The **residuals** are the difference between the predicted and actual values.
To retrieve the residuals we can access the slot or use the resid() function.

```{r,prompt=T,echo=T}
summary(resid(lmResult))
summary(lmResult$residual)
```
Ideally you would want your residuals to be normally distributed around 0.

Statistics (25/26) - R-squared
=========================================================

```{r,prompt=T,echo=F}
summary(lmResult)
```

The **R-squared** value represents the proportion of variability in the response variable that is explained by the explanatory variable.

A high **R-squared** here indicates that the line fits closely to the data.

Statistics (26/26) - F-statistics.
=========================================================

```{r,prompt=T}
summary(lmResult)
```

The results from linear models also provides a measure of significance for a variable not being relevant.

Statistics (Extra) - A fit line
=========================================================

![alt text](imgs/fittedline.png)

Statistics (Extra) - Calculating R-squared
=========================================================

![alt text](imgs/rsquared.png)

Statistics (Extra) - Calculating R-squared
=========================================================

```{r,prompt=F}
SSE <- sum(resid(lmResult)^2)
TSS <- sum((lmExample$Y - mean(lmExample$Y))^2)
1- SSE/TSS
summary(lmResult)$r.squared
```

Statistics (Extra) - Calculating F-stat
=========================================================

![alt text](imgs/fstatistic.png)

Statistics (Extra) - Calculating F-stat
=========================================================

```{r,prompt=F}
MSE <- mean(lmResult$residuals^2)
RSS <- sum((predict(lmResult) - mean(lmExample$Y))^2)

summary(lmResult)$fstatistic

```



Slide With Plot
========================================================

```{r, echo=FALSE}
plot(cars)
```
